diff --git a/mtolib/background.py b/mtolib/background.py
index 3dcea7a..4dbebb3 100644
--- a/mtolib/background.py
+++ b/mtolib/background.py
@@ -109,6 +109,10 @@ def check_tile_is_flat(tile, rejection_rate):
     if np.count_nonzero(~np.isnan(tile)) == 0:
         return _REJECT_TILE
 
+    # Discard tiles which are 80% NaNs and bigger than 8 so test_normality doesn't break
+    if (np.sum(np.isfinite(tile)) < 0.2*tile.size) or (np.sum(np.isfinite(tile)) < 8): 
+        return _REJECT_TILE
+    
     # If tile fails to be normal, reject it
     if test_normality(tile, rejection_rate_1) is False:
         return _REJECT_TILE
diff --git a/mtolib/io_mto.py b/mtolib/io_mto.py
index 692faaa..3761067 100644
--- a/mtolib/io_mto.py
+++ b/mtolib/io_mto.py
@@ -1,6 +1,7 @@
 """Input/output functions."""
 
 from astropy.io import fits
+import astropy
 import sys
 import numpy as np
 import argparse
@@ -84,13 +85,18 @@ def write_fits_file(data, header=None, filename='out.fits'):
 
     image_hdus = [fits.ImageHDU(d) for d in data[1:]]
 
-    # Ignore clobber warning
-    warnings.filterwarnings('ignore', category=AstropyDeprecationWarning, append=True)
 
-    # Write to file
     hdulist = fits.HDUList([primary_hdu, *image_hdus])
-    hdulist.writeto(filename, clobber=True)  # Clobber deprecated for astropy 1.3
-    hdulist.close()
+
+    # Write to file
+    if astropy.__version__ <= '1.3':
+        # Ignore clobber warning
+        warnings.filterwarnings('ignore', category=AstropyDeprecationWarning, append=True)
+        hdulist.writeto(filename, clobber=True)  # Clobber deprecated for astropy 1.3
+        hdulist.close()
+    else:
+        hdulist.writeto(filename, overwrite=True)  # Clobber deprecated for astropy 1.3
+        hdulist.close()
 
 
 def generate_image(img, object_ids, p,
diff --git a/mtolib/maxtree.py b/mtolib/maxtree.py
index f832015..917e220 100644
--- a/mtolib/maxtree.py
+++ b/mtolib/maxtree.py
@@ -3,6 +3,7 @@
 import ctypes as ct
 import numpy.ctypeslib as npct
 import numpy as np
+import os
 
 from mtolib import _ctype_classes as mt_class
 
@@ -44,9 +45,9 @@ class OriginalMaxTree(MaxTree):
 
         # Get access to the compiled C maxtree library
         if params.d_type == ct.c_double:
-            self.mt_lib = ct.CDLL('mtolib/lib/maxtree_double.so')
+            self.mt_lib = ct.CDLL(os.path.join(os.path.dirname(__file__),'lib','maxtree_double.so'))
         else:
-            self.mt_lib = ct.CDLL('mtolib/lib/maxtree.so')
+            self.mt_lib = ct.CDLL(os.path.join(os.path.dirname(__file__),'lib','maxtree.so'))
 
 
         # Create image object
diff --git a/mtolib/postprocessing.py b/mtolib/postprocessing.py
index ee157b6..95d6f17 100644
--- a/mtolib/postprocessing.py
+++ b/mtolib/postprocessing.py
@@ -81,7 +81,7 @@ def get_image_parameters(img, object_ids, sig_ancs, params,):
 
     parameters = []
     headings = ['ID', 'X', 'Y', 'A', 'B', 'theta',  # 'kurtosis',
-                           'total_flux', 'mu_max', 'mu_median', 'mu_mean', 'R_fwhm', 'R_e', 'R10', 'R90']
+                    'total_flux', 'mu_max', 'mu_median', 'mu_mean', 'R_fwhm', 'R_e', 'R10', 'R90', 'area']
 
     parameters.append(headings)
 
@@ -140,6 +140,8 @@ def get_object_parameters(img, node_id, pixel_indices):
     radii, half_max = get_light_distribution(pixel_values, flux_sum)
     p.append(half_max)
     p.extend(radii)
+    
+    p.append(np.size(pixel_values))
 
     return p
 
diff --git a/mtolib/tree_filtering.py b/mtolib/tree_filtering.py
index 88aa9ef..9eb192a 100644
--- a/mtolib/tree_filtering.py
+++ b/mtolib/tree_filtering.py
@@ -2,6 +2,7 @@
 
 import ctypes as ct
 import numpy as np
+import os 
 
 import mtolib.significance_tests as mt_sig
 from mtolib import _ctype_classes as mt_class
@@ -9,7 +10,7 @@ from mtolib.utils import time_function
 
 # Get access to the compiled C maxtree library
 # Defaults to float version
-mto_lib = ct.CDLL('mtolib/lib/mt_objects.so')
+mto_lib = ct.CDLL(os.path.join(os.path.dirname(__file__),'lib','mt_objects.so'))
 
 
 def init_double_filtering(params):
@@ -18,7 +19,7 @@ def init_double_filtering(params):
 
     # If the image is 64 bit, use the double version of the library
     if params.d_type == ct.c_double:
-        mto_lib = ct.CDLL('mtolib/lib/mt_objects_double.so')
+        mto_lib = ct.CDLL(os.path.join(os.path.dirname(__file__),'lib','mt_objects_double.so'))
 
 
 def up_tree():
